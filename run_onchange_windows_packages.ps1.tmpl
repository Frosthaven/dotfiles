{{ if eq .chezmoi.os "windows" -}}

# ----------------------------------------
# COMPUTE PACKAGES.YAML HASH
# ----------------------------------------
$packagesFile = "$HOME/.local/share/chezmoi/.chezmoidata/packages.yaml"
$currentHash = (CertUtil -hashfile $packagesFile SHA256 |
    Where-Object { $_ -match '^[0-9A-F]{2,}' } |
    ForEach-Object { ($_ -replace '\s','') }) -join ''

# Output hash as part of template so chezmoi tracks changes
Write-Output "Packages.yaml SHA256: $currentHash"

# ----------------------------------------
# ADMIN CHECK
# ----------------------------------------
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")
if (-not $isAdmin) {
    $input = Read-Host -Prompt "Install Packages? (y/n)"
    if ($input -eq 'n') {
        Write-Host "Skipping package installation." -ForegroundColor Yellow
        exit
    } else {
        # Relaunch as admin
        Start-Process -FilePath powershell -ArgumentList "-File", "$PSCommandPath" -Verb RunAs -Wait
        exit
    }
}

# ----------------------------------------
# BUILD PACKAGE LIST (IN ORDER)
# ----------------------------------------
$packages = @()
{{- $withWin := dict -}}
{{- range $key, $value := .packages -}}
    {{- if (index $value "win") -}}
        {{- $_ := set $withWin $key $value -}}
    {{- end -}}
{{- end -}}
{{- $keys := keys $withWin -}}
{{- range $i, $key := $keys }}
$packages += @{
    Name   = "{{$key}}"
    Script = @'
{{ index (index $withWin $key) "win" | replace "'" "''" }}
'@
}
{{- end }}

$totalPackages = $packages.Count
$currentPackage = 0

Write-Host ""
Write-Host "Processing $totalPackages Packages..." -ForegroundColor Cyan
Write-Host ""

# ----------------------------------------
# EXECUTE PACKAGES
# ----------------------------------------
foreach ($pkg in $packages) {
    # Refresh PATH from system + user
    $env:Path = [System.Environment]::GetEnvironmentVariable('Path', [System.EnvironmentVariableTarget]::Machine) + ';' +
                [System.Environment]::GetEnvironmentVariable('Path', [System.EnvironmentVariableTarget]::User)

    $currentPackage++
    Write-Host "----- [$currentPackage/$totalPackages] $($pkg.Name) -----" -ForegroundColor Magenta
    Invoke-Expression $pkg.Script
}

Write-Host ""
Read-Host -Prompt "Done! Press Enter to exit the package installer."

{{ end -}}
