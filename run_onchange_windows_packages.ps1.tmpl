{{ if eq .chezmoi.os "windows" -}}

# Path to the packages file
$PackagesFile = "$HOME\.local\share\chezmoi\.chezmoidata\packages.yaml"
$HashFile = "$PackagesFile.hash"

# Compute SHA256 hash of current packages.yaml
$CurrentHash = (CertUtil -hashfile $PackagesFile SHA256 | Select-String -Pattern "^[0-9A-F]{64}$").ToString()

# Read stored hash if exists
$StoredHash = if (Test-Path $HashFile) { Get-Content $HashFile -Raw } else { "" }

if ($CurrentHash -eq $StoredHash) {
    Write-Host "Packages unchanged. Skipping installation."
    return
}

# Save the new hash for next run
$CurrentHash | Out-File -Encoding ascii $HashFile

# Ensure PATH includes Machine + User for each package execution
function Refresh-Path {
    $env:Path = [System.Environment]::GetEnvironmentVariable('Path', [EnvironmentVariableTarget]::Machine) + ';' +
                [System.Environment]::GetEnvironmentVariable('Path', [EnvironmentVariableTarget]::User)
}

# Prompt for admin if not running as administrator
function Ensure-Admin {
    if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
        $answer = Read-Host "Install Packages? (y/n)"
        if ($answer -eq 'n') {
            Write-Host "Skipping package installation.";
            exit
        } else {
            Start-Process -FilePath powershell -ArgumentList "-File `"$PSCommandPath`"" -Verb RunAs -Wait
            exit
        }
    }
}

# Run admin check once
Ensure-Admin

# Build ordered package list from packages.yml (preserves numeric labels)
$packages = @()
{{- $withWin := dict -}}
{{- range $key, $value := .packages -}}
    {{- if (index $value "win") -}}
        {{- $_ := set $withWin $key $value -}}
    {{- end -}}
{{- end -}}
{{- $keys := keys $withWin -}}
{{- range $i, $key := $keys }}
$packages += @{
    Name = "{{$key}}"
    Script = @'
{{ index (index $withWin $key) "win" | replace "'" "''" }}
'@
}
{{- end -}}

$totalPackages = $packages.Count
$currentPackage = 0

Write-Host "`nProcessing $totalPackages Packages...`n"

foreach ($pkg in $packages) {
    Refresh-Path
    $currentPackage++
    Write-Host "----- [$currentPackage/$totalPackages] $($pkg.Name) -----" -ForegroundColor Magenta

    try {
        Invoke-Expression $pkg.Script
    } catch {
        Write-Warning "Package $($pkg.Name) failed: $_"
    }
}

Write-Host "`nAll packages processed."
Read-Host -Prompt "Press Enter to exit"

{{ end -}}
