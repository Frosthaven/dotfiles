{{ if eq .chezmoi.os "windows" }}

# ----------------------------------------
# FILEHASH CHECK (for template change detection only)
# ----------------------------------------
$packagesFile = "$HOME/.local/share/chezmoi/.chezmoidata/packages.yaml"

# Get SHA256 hash as a single string
$packagesHash = (CertUtil -hashfile $packagesFile SHA256 | Select-String "^[0-9A-F]{2}" | ForEach-Object { $_.ToString().Trim() }) -join ''
Write-Host "Packages.yaml SHA256: $packagesHash"

# ----------------------------------------
# ADMIN CHECK
# ----------------------------------------
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")
if (-not $isAdmin) {
    $input = Read-Host -Prompt "Install Packages? (y/n)"
    if ($input -eq 'n') {
        Write-Host "Skipping package installation." -ForegroundColor Yellow
        exit
    } else {
        # Relaunch as admin
        Start-Process -FilePath powershell -ArgumentList "-File", "$PSCommandPath" -Verb RunAs -Wait
        exit
    }
}

# ----------------------------------------
# BUILD PACKAGE LIST (preserve YAML order)
# ----------------------------------------
$packages = @()
{{ range $key, $value := .packages }}
    {{ if index $value "win" }}
$packages += @{
    Name   = "{{$key}}"
    Script = @'
{{ index $value "win" | replace "'" "''" }}
'@
}
    {{ end }}
{{ end }}

$totalPackages = $packages.Count
$currentPackage = 0

Write-Host ""
Write-Host "Processing $totalPackages Packages..." -ForegroundColor Cyan
Write-Host ""

# ----------------------------------------
# EXECUTE PACKAGES
# ----------------------------------------
foreach ($pkg in $packages) {
    # Refresh PATH from system + user in case previous installs modified it
    $env:Path = [System.Environment]::GetEnvironmentVariable('Path', [System.EnvironmentVariableTarget]::Machine) + ';' +
                [System.Environment]::GetEnvironmentVariable('Path', [System.EnvironmentVariableTarget]::User)

    $currentPackage++
    Write-Host "----- [$currentPackage/$totalPackages] $($pkg.Name) -----" -ForegroundColor Magenta
    Invoke-Expression $pkg.Script
}

Write-Host ""
Read-Host -Prompt "Done! Press Enter to exit the package installer."

{{ end }}
