packages:
    # fonts *******************************************************************
    # *************************************************************************

    font-jetbrains-mono:
        win: winget install --id DEVCOM.JetBrainsMonoNerdFont
        mac: brew install --cask font-jetbrains-mono-nerd-font
        apt: FONT_NAME="JetBrainsMono"; FONT_DIR="$HOME/.local/share/fonts"; if fc-list | grep -qi "$FONT_NAME Nerd Font"; then echo "$FONT_NAME Nerd Font already installed."; else FONT_URL="https://github.com/ryanoasis/nerd-fonts/releases/download/v3.4.0/${FONT_NAME}.zip"; TEMP_DIR="/tmp/${FONT_NAME}-font"; mkdir -p "$TEMP_DIR"; mkdir -p "$FONT_DIR"; curl -L -o "$TEMP_DIR/${FONT_NAME}.zip" "$FONT_URL"; unzip -o "$TEMP_DIR/${FONT_NAME}.zip" -d "$FONT_DIR"; rm -rf "$TEMP_DIR"; fc-cache -f -v; echo "$FONT_NAME Nerd Font installed successfully."; fi

    # package managers ********************************************************
    # *************************************************************************

    1-package-manager-uv: # universal package manager
        win: winget install --id astral-sh.uv
        mac: brew install uv
        apt: curl -LsSf https://astral.sh/uv/install.sh | sh
    1-package-manager-fnm: # node version manager + same-shell setup
        win: winget install --id Schniz.fnm -e --silent; $fnm = Get-ChildItem "$env:LOCALAPPDATA\Microsoft\WinGet\Packages" -Recurse -Filter fnm.exe -File -ErrorAction SilentlyContinue | Select-Object -First 1 -ExpandProperty FullName; if ($fnm) { $env:FNM_DIR = "$env:USERPROFILE\AppData\Local\fnm"; $env:PATH += ";$env:FNM_DIR;$env:FNM_DIR\.bin"; Invoke-Expression (& $fnm env | Out-String); if (-not (Get-Command node -ErrorAction SilentlyContinue)) { & $fnm install --lts; & $fnm use lts-latest } } else { Write-Error "fnm.exe not found in WinGet packages folder." }
        mac: '[[ -z "$FNM_DIR" ]] && brew install fnm && output=$(fnm env) && eval "$output" && (! command -v node &>/dev/null) && fnm install --lts && fnm use lts-latest'
        apt: command -v fnm >/dev/null 2>&1 || curl -fsSL https://fnm.vercel.app/install | bash
    1-package-manager-mas: # mac app store cli
        win: # n/a
        mac: brew install mas
        apt: # n/a
    1-package-manager-appinstaller: # microsoft
        win: $pkg = "Microsoft.AppInstaller"; if (-not (winget list --id $pkg | Select-String $pkg)) { winget install --id $pkg }; try { winget pin add $pkg } catch {}

    # programming languages ***************************************************
    # *************************************************************************

    2-language-zig: # needed to auto-compile telescope in neovim cross-platform
        win: winget install --id zig.zig
        mac: brew install zig
        apt: ZIG_VERSION=0.12.0 && if ! command -v zig >/dev/null 2>&1 || [[ "$(zig version)" != "$ZIG_VERSION" ]]; then mkdir -p ~/.local/bin && curl -LO https://ziglang.org/download/$ZIG_VERSION/zig-linux-x86_64-$ZIG_VERSION.tar.xz && tar -xf zig-linux-x86_64-$ZIG_VERSION.tar.xz && mv zig-linux-x86_64-$ZIG_VERSION/zig ~/.local/bin/zig && rm -rf zig-linux-x86_64-$ZIG_VERSION* && echo "Zig $ZIG_VERSION installed."; else echo "Zig $ZIG_VERSION is already installed."; fi
    2-language-rust:
        win: winget install --id Rustlang.Rust.GNU --accept-package-agreements --accept-source-agreements; choco install mingw -y; $mingwBin = "C:\ProgramData\mingw64\mingw64\bin"; $cargoBin = "$env:USERPROFILE\.cargo\bin"; if (Test-Path "$mingwBin\dlltool.exe") { $env:Path += ";$mingwBin;$cargoBin"; dlltool --version } else { Write-Error "dlltool.exe not found at $mingwBin" }; winget install --id=Rustlang.Rustup;
        mac: brew install rust; brew install rustup;
        apt: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y; . "$HOME/.cargo/env"
    2-language-python:
        win: uv python install --default
        mac: uv python install --default
        apt: uv python install --default
    2-language-go:
        win: winget install --id GoLang.Go
        mac: brew install go
        apt: GO_VERSION=1.22.2 && if ! command -v go >/dev/null 2>&1 || [[ "$(go version | awk '{print $3}')" != "go$GO_VERSION" ]]; then curl -LO https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz && mkdir -p ~/.local && tar -C ~/.local -xzf go${GO_VERSION}.linux-amd64.tar.gz && mkdir -p ~/.local/bin && ln -sf ~/.local/go/bin/go ~/.local/bin/go && rm go${GO_VERSION}.linux-amd64.tar.gz && echo "Go $GO_VERSION installed."; else echo "Go $GO_VERSION is already installed."; fi
    2-language-lua:
        win: winget install --id DEVCOM.Lua
        mac: brew install lua
        apt: command -v lua >/dev/null || { echo "Installing lua5.4 and luarocks..."; sudo apt update -qq && sudo apt install -y lua5.4 luarocks; }
    2-dot-net:
        win: winget install --id Microsoft.DotNet.SDK.8; winget install --id Microsoft.DotNet.SDK.9
        mac: # n/a
        apt: # n/a
    2-language-php:
        win: choco install php -y
        mac: brew install php
        apt: PHP_VERSION=8.4 && if ! command -v php >/dev/null 2>&1 || [[ "$(php -v | head -n1 | awk '{print $2}')" != "$PHP_VERSION" ]]; then sudo apt update && sudo apt install -y software-properties-common && sudo add-apt-repository -y ppa:ondrej/php && sudo apt update && sudo apt install -y php$PHP_VERSION && sudo update-alternatives --set php /usr/bin/php$PHP_VERSION && echo "PHP $PHP_VERSION installed."; else echo "PHP $PHP_VERSION is already installed."; fi && mkdir -p ~/.local/bin

    # terminal emulators ******************************************************
    # *************************************************************************

    terminal-wezterm:
        win: winget install --id wez.wezterm
        mac: brew install wezterm
        apt: flatpak install flathub org.wezfurlong.wezterm

    # shells ******************************************************************
    # *************************************************************************

    shell-powershell:
        win: winget install --id Microsoft.PowerShell
        mac: brew install powershell
        apt: sudo snap install powershell --classic
    shell-clink: # spices up cmd.exe
        win: winget install --id chrisant996.Clink
        mac: # n/a
        apt: # n/a
    shell-nushell: # structured data, used as sidekick
        win: cargo install nu --locked #winget install --id Nushell.Nushell
        mac: cargo install nu --locked
        apt: cargo install nu --locked
    shell-carapace: # shell autocomplete
        win: winget install --id rsteube.Carapace
        mac: brew install carapace
        apt: CARAPACE_VERSION=v0.22.0 && if ! command -v carapace >/dev/null 2>&1 || [[ "$(carapace --version | awk '{print $3}')" != "$CARAPACE_VERSION" ]]; then curl -LO https://github.com/rsteube/carapace-bin/releases/download/$CARAPACE_VERSION/carapace-bin_$CARAPACE_VERSION-linux_amd64.tar.gz && mkdir -p ~/.local/bin && tar -xzf carapace-bin_$CARAPACE_VERSION-linux_amd64.tar.gz -C ~/.local/bin carapace && rm carapace-bin_$CARAPACE_VERSION-linux_amd64.tar.gz && echo "Carapace $CARAPACE_VERSION installed."; else echo "Carapace $CARAPACE_VERSION is already installed."; fi && mkdir -p ~/.local/bin
    shell-starship: # prompt
        win: choco install starship.portable -y
        mac: brew install starship
        apt: curl -sS https://starship.rs/install.sh | sh -s -- --yes --bin-dir ~/.local/bin

    # command line tools ******************************************************
    # *************************************************************************

    cli-git:
        win: winget install --id Git.Git
        mac: brew install git
        apt: sudo apt install git -y
    cli-composer:
        win: if (-not (Get-Command composer -ErrorAction SilentlyContinue)) { $p="$env:TEMP\Composer-Setup.exe"; Invoke-WebRequest https://getcomposer.org/Composer-Setup.exe -OutFile $p -UseBasicParsing; if (Test-Path $p) { Start-Process -Wait -FilePath $p } else { Write-Error "Download failed or file missing." } }
        mac: brew install composer
        apt: sudo apt install composer -y
    cli-yazi:
        win: winget install --id sxyazi.yazi
        mac: brew install yazi
        apt: sudo snap install yazi --classic
    cli-neovim: # text editor
        win: winget install --id Neovim.Neovim
        mac: brew install neovim
        apt: VER="v0.11.3" && nvim --version 2>/dev/null | grep -q "$VER" || (sudo apt-get update && sudo apt-get install -y ninja-build gettext cmake unzip curl build-essential && git clone --depth 1 --branch "$VER" https://github.com/neovim/neovim /tmp/nvim-src && cd /tmp/nvim-src && make CMAKE_BUILD_TYPE=Release && sudo make install && rm -rf /tmp/nvim-src)
    cli-ripgrep: # search tool
        win: cargo install ripgrep #winget install --id BurntSushi.ripgrep.MSVC
        mac: cargo install ripgrep
        apt: cargo install ripgrep
    cli-fzf: # fuzzy finder
        win: winget install --id junegunn.fzf
        mac: brew install fzf
        apt: sudo apt install fzf -y
    cli-fd: # alternative to find
        win: cargo install fd-find #winget install --id sharkdp.fd
        mac: cargo install fd-find
        apt: cargo install fd-find
    cli-bat: # alternative to cat
        win: winget install --id sharkdp.bat
        mac: brew install bat
        apt: sudo apt install bat -y
    cli-jq: # json processor
        win: winget install --id jqlang.jq
        mac: brew install jq
        apt: sudo apt install jq -y
    cli-yq: # yaml processor
        win: winget install --id MikeFarah.yq
        mac: brew install yq
        apt: sudo snap install yq -y
    cli-eza: # alternative to ls
        win: cargo install eza # winget install --id eza-community.eza
        mac: cargo install eza
        apt: cargo install eza
    cli-zoxide: # alternative to cd (has jumping)
        win: winget install --id ajeetdsouza.zoxide
        mac: brew install zoxide
        apt: sudo apt install zoxide -y
    cli-duf: # alternative to du
        win: winget install --id muesli.duf
        mac: brew install duf
        apt: sudo apt install duf -y
    cli-tokei: # code line counter
        win: cargo install --git https://github.com/XAMPPRocky/tokei.git tokei #winget install --id XAMPPRocky.tokei
        mac: cargo install --git https://github.com/XAMPPRocky/tokei.git tokei
        apt: cargo install --git https://github.com/XAMPPRocky/tokei.git tokei
    cli-stripe-cli: # stripe cli
        win: winget install --id Stripe.StripeCli
        mac: brew install stripe-cli
        apt: command -v stripe >/dev/null 2>&1 || curl -fsSL https://stripe.com/install-cli | bash
    cli-posting: # api tool
        win: uv tool install --python 3.12 posting
        mac: uv tool install --python 3.12 posting
        apt: uv tool install --python 3.12 posting
    cli-mkdocs:
        win: uv tool install --python 3.12 mkdocs-material
        mac: uv tool install --python 3.12 mkdocs-material 2>/dev/null
        apt: uv tool install --python 3.12 mkdocs-material 2>/dev/null
    cli-prettier:
        win: npm install --global prettier
        mac: npm install --global prettier
        apt: npm install --global prettier
    cli-fastfetch:
        win: # n/a
        mac: brew install fastfetch
        apt: sudo add-apt-repository ppa:zhangsongcui3371/fastfetch -y; sudo apt update; sudo apt install fastfetch -y;

    # container management ****************************************************
    # *************************************************************************

    containers-docker:
        win: winget install --id Docker.DockerDesktop
        mac: # n/a
        apt: command -v docker >/dev/null 2>&1 || (curl -fsSL https://get.docker.com | sh && sudo usermod -aG docker "$(whoami)" && echo "Docker installed. Log out/in to apply group changes.")
    containers-orbstack: # alternative to docker on mac
        win: # n/a
        mac: brew install --cask orbstack
        apt: # n/a
    containers-ddev: # local development container management
        win: winget install --id DDEVFoundation.DDEV
        mac: brew install ddev/ddev/ddev; mkcert -install;
        apt: sudo apt-get update && sudo apt-get install -y curl gnupg && sudo install -m 0755 -d /etc/apt/keyrings && curl -fsSL https://pkg.ddev.com/apt/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/ddev.gpg >/dev/null && sudo chmod a+r /etc/apt/keyrings/ddev.gpg && echo "deb [signed-by=/etc/apt/keyrings/ddev.gpg] https://pkg.ddev.com/apt/ * *" | sudo tee /etc/apt/sources.list.d/ddev.list >/dev/null && sudo apt-get update && sudo apt-get install -y ddev && mkcert -install

    # desktop window management ***********************************************
    # *************************************************************************

    window-management-komorebi:
        win: winget install --id=LGUG2Z.whkd -e; winget install --id LGUG2Z.komorebi; if (-Not (Test-Path "$env:USERPROFILE\.config\komorebi\applications.json")) { komorebic fetch-asc }
        mac: # n/a
        apt: # n/a
    window-management-aerospace:
        win: # n/a
        mac: brew install nikitabobko/tap/aerospace
        apt: # n/a
    window-management-aeroplace:
        win: # n/a
        mac: brew tap frosthaven/aeroplace; brew install aeroplace;
        apt: # n/a
    window-management-borders:
        win: # n/a
        mac: brew tap FelixKratz/formulae; brew install borders;
        apt: # n/a
    window-management-sketchybar:
        win: # n/a
        mac: brew tap FelixKratz/formulae; brew install sketchybar;
        apt: # n/a

    # desktop toys ************************************************************
    # *************************************************************************
    # toys are small applications that have a single purpose, often living in
    # the system tray

    toy-bitwarden: # password manager
        win: winget install --id Bitwarden.Bitwarden
        mac: brew install bitwarden
        apt: flatpak install flathub com.bitwarden.desktop -y
    toy-keka: # archive manager
        win: # n/a
        mac: brew install keka
        apt: # n/a
    toy-raycast: # launcher
        win: # n/a
        mac: brew install raycast
        apt: # n/a
    toy-cursorcerer: # cursor manager
        win: # n/a
        mac: brew install cursorcerer
        apt: # n/a
    toy-logitune: # logitech mouse manager
        win: # n/a
        mac: brew install logitune
        apt: # n/a
    toy-logi-options-plus: # logitech mouse manager
        win: winget install --id Logitech.OptionsPlus
        mac: brew install logi-options-plus
        apt: # n/a
    toy-logi-g-hub: # logitech mouse manager
        win: $pkg = "Logitech.GHUB"; if (-not (winget list --id $pkg | Select-String $pkg)) { winget install --id $pkg }; try { winget pin add $pkg } catch {}
        mac: brew install --cask logitech-g-hub
        apt: # n/a
    toy-paragon-ntfs: # ntfs driver
        win: # n/a
        mac: brew install paragon-ntfs
        apt: # n/a
    toy-bartender: # menu bar manager
        win: # n/a
        mac: brew install bartender
        apt: # n/a
    toy-cleanshot: # screen capture
        win: # n/a
        mac: brew install cleanshot
        apt: # n/a
    toy-amphetamine: # keep mac awake
        win: # n/a
        mac: mas install 937984704
        apt: # n/a
    toy-colorslurp: # color picker
        win: # n/a
        mac: mas install 1287239339
        apt: # n/a
    toy-rainmeter: # desktop customization
        win: winget install --id Rainmeter.Rainmeter
        mac: # n/a
        apt: # n/a
    toy-nanazip: # archive manager
        win: winget install --id M2Team.NanaZip
        mac: # n/a
        apt: # n/a
    toy-sharex: # screen capture
        win: winget install --id ShareX.ShareX
        mac: # n/a
        apt: # n/a
    toy-hwinfo: # system monitor
        win: winget install --id REALiX.HWiNFO
        mac: # n/a
        apt: # n/a
    toy-powertoys: # system utilities
        win: winget install --id Microsoft.PowerToys
        mac: # n/a
        apt: # n/a
    toy-macrium-reflect: # backup
        win: echo "WARNING Cannot automatically install - Install from https://www.macrium.com/reflectfree"
        mac: # n/a
        apt: # n/a
    toy-istat-menus: # system monitor
        win: # n/a
        mac: brew install istat-menus
        apt: # n/a
    toy-jettison:
        win: # n/a
        mac: brew install jettison
        apt: # n/a
    toy-pixelsnap:
        win: # n/a
        mac: brew install pixelsnap
        apt: # n/a

    # desktop applications ****************************************************
    # *************************************************************************

    desktop-disk-usage-analyzer:
        win: winget install -e --id AntibodySoftware.WizTree
        mac: # n/a
        apt: # n/a
    desktop-steam: # gaming
        win: winget install --id Valve.Steam
        mac: brew install --cask steam
        apt: flatpak install flathub com.valvesoftware.Steam -y
    desktop-adobe-creative-cloud: # creative suite
        win: winget install --id Adobe.CreativeCloud
        mac: brew install adobe-creative-cloud
        apt: # n/a
    desktop-adobe-acrobat-reader:
        win: $pkg = "Adobe.Acrobat.Reader.64-bit"; if (-not (winget list --id $pkg | Select-String $pkg)) { winget install --id $pkg }; try { winget pin add $pkg } catch {}
        mac: # n/a
        apt: # n/a
    desktop-microsoft-office: # office suite
        win: winget install --id Microsoft.Office
        mac: brew install microsoft-office
        apt: # n/a
    desktop-jetbrains-toolbox: # jetbrains suite
        win: winget install --id JetBrains.Toolbox
        mac: brew install jetbrains-toolbox
        apt: # n/a
    desktop-obsidian: # note taking
        win: winget install --id Obsidian.Obsidian
        mac: brew install obsidian
        apt: flatpak install flathub md.obsidian.Obsidian -y
    desktop-local-send: # file sharing
        win: winget install --id LocalSend.LocalSend
        mac: brew install --cask localsend
        apt: flatpak install flathub org.localsend.localsend_app -y
    desktop-discord: # chat
        win: $pkg = "Discord.Discord"; if (-not (winget list --id $pkg | Select-String $pkg)) { winget install --id $pkg }; try { winget pin add $pkg } catch {}
        mac: brew install discord
        apt: flatpak install flathub com.discordapp.Discord -y
    desktop-slack: # chat
        win: winget install --id SlackTechnologies.Slack
        mac: brew install slack
        apt: flatpak install flathub com.slack.Slack -y
    desktop-spotify: # music
        win: $pkg = "Spotify.Spotify"; if (-not (winget list --id $pkg | Select-String $pkg)) { winget install --id $pkg }; try { winget pin add $pkg } catch {}
        mac: brew install spotify
        apt: flatpak install flathub com.spotify.Client -y
    desktop-zoom:
        win: winget install --id Zoom.Zoom
        mac: brew install zoom
        apt: flatpak install flathub us.zoom.Zoom -y
    desktop-obs:
        win: winget install --id OBSProject.OBSStudio
        mac: brew install obs
        apt: flatpak install flathub com.obsproject.Studio -y
    desktop-web-browser:
        win: winget install --id Microsoft.Edge
        mac: brew install microsoft-edge
        apt: flatpak install flathub com.microsoft.Edge -y
    desktop-files-sftp:
        win: winget install --id WinSCP.WinSCP
        mac: brew install forklift; defaults write -g NSFileViewer -string com.binarynights.ForkLift; defaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add '{LSHandlerContentType="public.folder";LSHandlerRoleAll="com.binarynights.ForkLift";}'
        apt: # n/a
    desktop-code:
        win: winget install --id Microsoft.VisualStudioCode
        mac: brew install --cask visual-studio-code
        apt: command -v code >/dev/null 2>&1 || (wget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/microsoft.gpg && echo "deb [arch=amd64] https://packages.microsoft.com/repos/code stable main" | sudo tee /etc/apt/sources.list.d/vscode.list >/dev/null && sudo apt update && sudo apt install -y code)
    desktop-qbittorrent:
        win: winget install --id qBittorrent.qBittorrent
        mac: brew install qbittorrent
        apt: flatpak install flathub com.transmissionbt.Transmission -y
    desktop-database-manager:
        win: choco install dbeaver -y
        mac: brew install --cask dbeaver-community
        apt: flatpak install flathub io.dbeaver.DBeaverCommunity -y
    desktop-video-player:
        win: winget install screenbox -s winget
        mac: brew install iina
        apt: # n/a
